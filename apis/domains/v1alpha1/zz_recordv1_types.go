/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecordV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RecordV1Parameters struct {

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	DomainID *float64 `json:"domainId" tf:"domain_id,omitempty"`

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	TTL *float64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// RecordV1Spec defines the desired state of RecordV1
type RecordV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordV1Parameters `json:"forProvider"`
}

// RecordV1Status defines the observed state of RecordV1.
type RecordV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RecordV1 is the Schema for the RecordV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,selecteljet}
type RecordV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RecordV1Spec   `json:"spec"`
	Status            RecordV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordV1List contains a list of RecordV1s
type RecordV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RecordV1 `json:"items"`
}

// Repository type metadata.
var (
	RecordV1_Kind             = "RecordV1"
	RecordV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RecordV1_Kind}.String()
	RecordV1_KindAPIVersion   = RecordV1_Kind + "." + CRDGroupVersion.String()
	RecordV1_GroupVersionKind = CRDGroupVersion.WithKind(RecordV1_Kind)
)

func init() {
	SchemeBuilder.Register(&RecordV1{}, &RecordV1List{})
}
