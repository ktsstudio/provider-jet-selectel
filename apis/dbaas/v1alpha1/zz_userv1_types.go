/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type UserV1Parameters struct {

	// +kubebuilder:validation:Required
	DatastoreID *string `json:"datastoreId" tf:"datastore_id,omitempty"`

	// +kubebuilder:validation:Required
	Password *string `json:"password" tf:"password,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

// UserV1Spec defines the desired state of UserV1
type UserV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserV1Parameters `json:"forProvider"`
}

// UserV1Status defines the observed state of UserV1.
type UserV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserV1 is the Schema for the UserV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,selecteljet}
type UserV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserV1Spec   `json:"spec"`
	Status            UserV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserV1List contains a list of UserV1s
type UserV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserV1 `json:"items"`
}

// Repository type metadata.
var (
	UserV1_Kind             = "UserV1"
	UserV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserV1_Kind}.String()
	UserV1_KindAPIVersion   = UserV1_Kind + "." + CRDGroupVersion.String()
	UserV1_GroupVersionKind = CRDGroupVersion.WithKind(UserV1_Kind)
)

func init() {
	SchemeBuilder.Register(&UserV1{}, &UserV1List{})
}
