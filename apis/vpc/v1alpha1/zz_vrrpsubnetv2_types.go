/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VrrpSubnetV2Observation struct {
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Servers []VrrpSubnetV2ServersObservation `json:"servers,omitempty" tf:"servers,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Subnets []VrrpSubnetV2SubnetsObservation `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type VrrpSubnetV2Parameters struct {

	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// +kubebuilder:validation:Required
	MasterRegion *string `json:"masterRegion" tf:"master_region,omitempty"`

	// +kubebuilder:validation:Optional
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	SlaveRegion *string `json:"slaveRegion" tf:"slave_region,omitempty"`
}

type VrrpSubnetV2ServersObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VrrpSubnetV2ServersParameters struct {
}

type VrrpSubnetV2SubnetsObservation struct {
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`

	VtepIPAddress *string `json:"vtepIpAddress,omitempty" tf:"vtep_ip_address,omitempty"`
}

type VrrpSubnetV2SubnetsParameters struct {
}

// VrrpSubnetV2Spec defines the desired state of VrrpSubnetV2
type VrrpSubnetV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VrrpSubnetV2Parameters `json:"forProvider"`
}

// VrrpSubnetV2Status defines the observed state of VrrpSubnetV2.
type VrrpSubnetV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VrrpSubnetV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VrrpSubnetV2 is the Schema for the VrrpSubnetV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,selecteljet}
type VrrpSubnetV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VrrpSubnetV2Spec   `json:"spec"`
	Status            VrrpSubnetV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VrrpSubnetV2List contains a list of VrrpSubnetV2s
type VrrpSubnetV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VrrpSubnetV2 `json:"items"`
}

// Repository type metadata.
var (
	VrrpSubnetV2_Kind             = "VrrpSubnetV2"
	VrrpSubnetV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VrrpSubnetV2_Kind}.String()
	VrrpSubnetV2_KindAPIVersion   = VrrpSubnetV2_Kind + "." + CRDGroupVersion.String()
	VrrpSubnetV2_GroupVersionKind = CRDGroupVersion.WithKind(VrrpSubnetV2_Kind)
)

func init() {
	SchemeBuilder.Register(&VrrpSubnetV2{}, &VrrpSubnetV2List{})
}
