/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CrossregionSubnetV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Servers []ServersObservation `json:"servers,omitempty" tf:"servers,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Subnets []SubnetsObservation `json:"subnets,omitempty" tf:"subnets,omitempty"`

	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type CrossregionSubnetV2Parameters struct {

	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	Regions []RegionsParameters `json:"regions" tf:"regions,omitempty"`
}

type RegionsObservation struct {
}

type RegionsParameters struct {

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type ServersObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ServersParameters struct {
}

type SubnetsObservation struct {
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`

	VtepIPAddress *string `json:"vtepIpAddress,omitempty" tf:"vtep_ip_address,omitempty"`
}

type SubnetsParameters struct {
}

// CrossregionSubnetV2Spec defines the desired state of CrossregionSubnetV2
type CrossregionSubnetV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CrossregionSubnetV2Parameters `json:"forProvider"`
}

// CrossregionSubnetV2Status defines the observed state of CrossregionSubnetV2.
type CrossregionSubnetV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CrossregionSubnetV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CrossregionSubnetV2 is the Schema for the CrossregionSubnetV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,selecteljet}
type CrossregionSubnetV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CrossregionSubnetV2Spec   `json:"spec"`
	Status            CrossregionSubnetV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CrossregionSubnetV2List contains a list of CrossregionSubnetV2s
type CrossregionSubnetV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CrossregionSubnetV2 `json:"items"`
}

// Repository type metadata.
var (
	CrossregionSubnetV2_Kind             = "CrossregionSubnetV2"
	CrossregionSubnetV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CrossregionSubnetV2_Kind}.String()
	CrossregionSubnetV2_KindAPIVersion   = CrossregionSubnetV2_Kind + "." + CRDGroupVersion.String()
	CrossregionSubnetV2_GroupVersionKind = CRDGroupVersion.WithKind(CrossregionSubnetV2_Kind)
)

func init() {
	SchemeBuilder.Register(&CrossregionSubnetV2{}, &CrossregionSubnetV2List{})
}
