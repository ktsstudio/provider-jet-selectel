/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllQuotasObservation struct {
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	ResourceQuotas []ResourceQuotasObservation `json:"resourceQuotas,omitempty" tf:"resource_quotas,omitempty"`
}

type AllQuotasParameters struct {
}

type ProjectV2Observation struct {
	AllQuotas []AllQuotasObservation `json:"allQuotas,omitempty" tf:"all_quotas,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ProjectV2Parameters struct {

	// +kubebuilder:validation:Optional
	AutoQuotas *bool `json:"autoQuotas,omitempty" tf:"auto_quotas,omitempty"`

	// +kubebuilder:validation:Optional
	CustomURL *string `json:"customUrl,omitempty" tf:"custom_url,omitempty"`

	// +kubebuilder:validation:Optional
	Quotas []QuotasParameters `json:"quotas,omitempty" tf:"quotas,omitempty"`

	// +kubebuilder:validation:Optional
	Theme map[string]*string `json:"theme,omitempty" tf:"theme,omitempty"`
}

type QuotasObservation struct {
}

type QuotasParameters struct {

	// +kubebuilder:validation:Required
	ResourceName *string `json:"resourceName" tf:"resource_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceQuotas []QuotasResourceQuotasParameters `json:"resourceQuotas" tf:"resource_quotas,omitempty"`
}

type QuotasResourceQuotasObservation struct {
}

type QuotasResourceQuotasParameters struct {

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`

	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ResourceQuotasObservation struct {
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`

	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`

	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ResourceQuotasParameters struct {
}

// ProjectV2Spec defines the desired state of ProjectV2
type ProjectV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectV2Parameters `json:"forProvider"`
}

// ProjectV2Status defines the observed state of ProjectV2.
type ProjectV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectV2 is the Schema for the ProjectV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,selecteljet}
type ProjectV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectV2Spec   `json:"spec"`
	Status            ProjectV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectV2List contains a list of ProjectV2s
type ProjectV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectV2 `json:"items"`
}

// Repository type metadata.
var (
	ProjectV2_Kind             = "ProjectV2"
	ProjectV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectV2_Kind}.String()
	ProjectV2_KindAPIVersion   = ProjectV2_Kind + "." + CRDGroupVersion.String()
	ProjectV2_GroupVersionKind = CRDGroupVersion.WithKind(ProjectV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectV2{}, &ProjectV2List{})
}
