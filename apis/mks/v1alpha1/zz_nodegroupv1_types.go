/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodegroupV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`
}

type NodegroupV1Parameters struct {

	// +kubebuilder:validation:Optional
	AffinityPolicy *string `json:"affinityPolicy,omitempty" tf:"affinity_policy,omitempty"`

	// +kubebuilder:validation:Optional
	AutoscaleMaxNodes *float64 `json:"autoscaleMaxNodes,omitempty" tf:"autoscale_max_nodes,omitempty"`

	// +kubebuilder:validation:Optional
	AutoscaleMinNodes *float64 `json:"autoscaleMinNodes,omitempty" tf:"autoscale_min_nodes,omitempty"`

	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	Cpus *float64 `json:"cpus,omitempty" tf:"cpus,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAutoscale *bool `json:"enableAutoscale,omitempty" tf:"enable_autoscale,omitempty"`

	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// +kubebuilder:validation:Optional
	KeypairName *string `json:"keypairName,omitempty" tf:"keypair_name,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	LocalVolume *bool `json:"localVolume,omitempty" tf:"local_volume,omitempty"`

	// +kubebuilder:validation:Required
	NodesCount *float64 `json:"nodesCount" tf:"nodes_count,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	RAMMb *float64 `json:"ramMb,omitempty" tf:"ram_mb,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGb *float64 `json:"volumeGb,omitempty" tf:"volume_gb,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type NodesObservation struct {
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

type NodesParameters struct {
}

type TaintsObservation struct {
}

type TaintsParameters struct {

	// +kubebuilder:validation:Required
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// NodegroupV1Spec defines the desired state of NodegroupV1
type NodegroupV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodegroupV1Parameters `json:"forProvider"`
}

// NodegroupV1Status defines the observed state of NodegroupV1.
type NodegroupV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodegroupV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodegroupV1 is the Schema for the NodegroupV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,selecteljet}
type NodegroupV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodegroupV1Spec   `json:"spec"`
	Status            NodegroupV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodegroupV1List contains a list of NodegroupV1s
type NodegroupV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodegroupV1 `json:"items"`
}

// Repository type metadata.
var (
	NodegroupV1_Kind             = "NodegroupV1"
	NodegroupV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodegroupV1_Kind}.String()
	NodegroupV1_KindAPIVersion   = NodegroupV1_Kind + "." + CRDGroupVersion.String()
	NodegroupV1_GroupVersionKind = CRDGroupVersion.WithKind(NodegroupV1_Kind)
)

func init() {
	SchemeBuilder.Register(&NodegroupV1{}, &NodegroupV1List{})
}
